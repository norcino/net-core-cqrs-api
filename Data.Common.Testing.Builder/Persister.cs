using System;
using System.Collections.Generic;
using System.Linq;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace Data.Common.Testing.Builder
{
    /// <inheritdoc cref="IPersister{TE}"/>
    public class Persister<TE> : IPersister<TE> where TE : class, new()
    {
        private readonly IHouseKeeperContext _context;
        private readonly DbSet<TE> _dbSet;

        public Persister(IHouseKeeperContext context)
        {
            _context = context;
            _dbSet = _context.Set<TE>();
        }

        /// <inheritdoc cref="IPersister{TE}.Persist()"/>
        public virtual TE Persist()
        {
            var entity = new Builder<TE>().Build();
            return Persist(ResetKey(entity));
        }

        /// <inheritdoc cref="IPersister{TE}.Persist(TE)"/>
        public virtual TE Persist(TE entity)
        {
            _dbSet.Add(entity);
            _context.SaveChanges();
            return entity;
        }

        /// <inheritdoc cref="IPersister{TE}.Persist(TE)"/>
        public List<TE> Persist(int numberOfEntities, Action<TE, int> entitySetupAction = null)
        {
            if (numberOfEntities < 1)
                throw new ArgumentOutOfRangeException($"{nameof(numberOfEntities)} must be greater than zero");

            var result = new List<TE>();
            for (var i = 1; i <= numberOfEntities; i++)
            {
                var entity = new Builder<TE>().Build();
                entity = ResetKey(entity);
                entitySetupAction?.Invoke(entity, i);
                result.Add(entity);
            }

            _dbSet.AddRange(result);
            _context.SaveChanges();
            return result;
        }

        /// <inheritdoc cref="IPersister{TE}.Persist(TE)"/>
        public TE Persist(Action<TE> entitySetupAction)
        {
            if (entitySetupAction == null)
                throw new ArgumentNullException($"{nameof(entitySetupAction)}");

            var entity = new Builder<TE>().Build();
            entitySetupAction(entity);
            return ResetKey(entity);
        }

        /// <summary>
        /// Detects the primary keys mapped for the entity. If those are generated by the database, the value is automatically reset.
        /// </summary>
        /// <param name="entity">Entity where the key values are reset</param>
        /// <returns>Entity with reset keys values</returns>
        private TE ResetKey(TE entity)
        {
            var keys = _context.Model.FindEntityType(typeof(TE))?.FindPrimaryKey();
            var properties = keys?.Properties;

            if (properties == null)
                return entity;

            foreach (var property in properties)
            {
                if (!property.RequiresValueGenerator())
                    continue;

                var keyName = property.Name;
                var entityProperty = entity.GetType().GetProperty(keyName);
                var type = entityProperty.PropertyType;

                if (Nullable.GetUnderlyingType(type) != null)
                {
                    entityProperty.SetValue(entity, null);
                }
                else if (type == typeof(UInt16) ||
                         type == typeof(UInt32) ||
                         type == typeof(UInt64) ||
                         type == typeof(Int16) ||
                         type == typeof(Int32) ||
                         type == typeof(Int64) ||
                         type == typeof(double) ||
                         type == typeof(float))
                {
                    entityProperty.SetValue(entity, 0);
                }
                else
                {
                    entityProperty.SetValue(entity, null);
                }
            }
            return entity;
        }
    }
}